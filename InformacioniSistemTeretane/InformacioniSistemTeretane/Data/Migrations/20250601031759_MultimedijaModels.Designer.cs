// <auto-generated />
using System;
using InformacioniSistemTeretane.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InformacioniSistemTeretane.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250601031759_MultimedijaModels")]
    partial class MultimedijaModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InformacioniSistemTeretane.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxUcesnika")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TakmicenjeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TakmicenjeId");

                    b.ToTable("Disciplina", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Igraonica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LokacijaId");

                    b.ToTable("Igraonica", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.IgraonicaPonuda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cijena")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IgraonicaId")
                        .HasColumnType("int");

                    b.Property<string>("OpisUsluge")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<TimeSpan>("Trajanje")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("IgraonicaId");

                    b.ToTable("IgraonicaPonuda", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Klijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Klijent", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Licenca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzdavanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidnaDo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KlijentId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Licenca", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.LicencniProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cijena")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TrajanjeDana")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LicencniProgram", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Lokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KontaktTelefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Lokacija", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Mapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Tip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.HasKey("Id");

                    b.ToTable("Mape");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Paket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cijena")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TrajanjeDana")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Paket", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.PrijavljeniGrupni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GrupniTreningId")
                        .HasColumnType("int");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<bool>("Prisutan")
                        .HasColumnType("bit");

                    b.Property<DateTime>("VrijemeDolaska")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GrupniTreningId");

                    b.HasIndex("KlijentId");

                    b.ToTable("PrijavljeniGrupni", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LokacijaId");

                    b.ToTable("Sala", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Screenshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumKreiranja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Screenshots");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Sudija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Sudija", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Takmicar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<int>("Pozicija")
                        .HasColumnType("int");

                    b.Property<decimal>("Rezultat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("KlijentId");

                    b.ToTable("Takmicar", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Takmicenje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Kotizacija")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SudijaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LokacijaId");

                    b.HasIndex("SudijaId");

                    b.ToTable("Takmicenje", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Trener", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Trener", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Trening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VrstaTreninga")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Trening", (string)null);

                    b.HasDiscriminator<string>("VrstaTreninga").HasValue("Trening");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Uplata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumUplate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Iznos")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<string>("NacinUplate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KlijentId");

                    b.HasIndex("PaketId");

                    b.ToTable("Uplata", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.VideoSadrzaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumDodavanja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("YouTubeVideoId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.ToTable("VideoSadrzaji");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.ZakazaniGrupni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrupniTreningId")
                        .HasColumnType("int");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrupniTreningId");

                    b.HasIndex("KlijentId");

                    b.ToTable("ZakazaniGrupni", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Zaposlenik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pozicija")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Zaposlenik", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.GrupniTrening", b =>
                {
                    b.HasBaseType("InformacioniSistemTeretane.Models.Trening");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUcesnika")
                        .HasColumnType("int");

                    b.Property<int>("SalaId")
                        .HasColumnType("int");

                    b.Property<int>("TrenerId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Vrijeme")
                        .HasColumnType("time");

                    b.HasIndex("SalaId");

                    b.HasIndex("TrenerId");

                    b.ToTable("Trening", t =>
                        {
                            t.Property("Datum")
                                .HasColumnName("GrupniTrening_Datum");

                            t.Property("TrenerId")
                                .HasColumnName("GrupniTrening_TrenerId");

                            t.Property("Vrijeme")
                                .HasColumnName("GrupniTrening_Vrijeme");
                        });

                    b.HasDiscriminator().HasValue("Grupni");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.PersonalniTrening", b =>
                {
                    b.HasBaseType("InformacioniSistemTeretane.Models.Trening");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<string>("Napredak")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TrenerId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Vrijeme")
                        .HasColumnType("time");

                    b.HasIndex("KlijentId");

                    b.HasIndex("TrenerId");

                    b.ToTable("Trening", t =>
                        {
                            t.Property("Datum")
                                .HasColumnName("PersonalniTrening_Datum");

                            t.Property("KlijentId")
                                .HasColumnName("PersonalniTrening_KlijentId");

                            t.Property("TrenerId")
                                .HasColumnName("PersonalniTrening_TrenerId");
                        });

                    b.HasDiscriminator().HasValue("Personalni");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.ProbniTrening", b =>
                {
                    b.HasBaseType("InformacioniSistemTeretane.Models.Trening");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int>("TrenerId")
                        .HasColumnType("int");

                    b.HasIndex("KlijentId");

                    b.HasIndex("TrenerId");

                    b.HasDiscriminator().HasValue("Probni");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Disciplina", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Takmicenje", "Takmicenje")
                        .WithMany("Discipline")
                        .HasForeignKey("TakmicenjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Takmicenje");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Igraonica", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Lokacija", "Lokacija")
                        .WithMany("Igraonice")
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.IgraonicaPonuda", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Igraonica", "Igraonica")
                        .WithMany("Ponude")
                        .HasForeignKey("IgraonicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Igraonica");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Klijent", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.ApplicationUser", "User")
                        .WithOne("Klijent")
                        .HasForeignKey("InformacioniSistemTeretane.Models.Klijent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Licenca", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Klijent", "Klijent")
                        .WithMany("Licence")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.LicencniProgram", "Program")
                        .WithMany("Licence")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klijent");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.PrijavljeniGrupni", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.GrupniTrening", "GrupniTrening")
                        .WithMany("Prisustva")
                        .HasForeignKey("GrupniTreningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Klijent", "Klijent")
                        .WithMany("GrupnePrijave")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrupniTrening");

                    b.Navigation("Klijent");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Sala", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Lokacija", "Lokacija")
                        .WithMany("Sale")
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Sudija", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Zaposlenik", "Zaposlenik")
                        .WithMany("Sudije")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("Zaposlenik");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Takmicar", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Disciplina", "Disciplina")
                        .WithMany("Takmicari")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Klijent", "Klijent")
                        .WithMany("Takmicenja")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("Klijent");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Takmicenje", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Lokacija", "Lokacija")
                        .WithMany("Takmicenja")
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Sudija", "Sudija")
                        .WithMany()
                        .HasForeignKey("SudijaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lokacija");

                    b.Navigation("Sudija");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Trener", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Zaposlenik", "Zaposlenik")
                        .WithMany("TrenerskiPodaci")
                        .HasForeignKey("ZaposlenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zaposlenik");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Uplata", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Klijent", "Klijent")
                        .WithMany("Uplate")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Paket", "Paket")
                        .WithMany("Uplate")
                        .HasForeignKey("PaketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klijent");

                    b.Navigation("Paket");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.ZakazaniGrupni", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.GrupniTrening", "GrupniTrening")
                        .WithMany("Rezervacije")
                        .HasForeignKey("GrupniTreningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Klijent", "Klijent")
                        .WithMany("GrupneRezervacije")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrupniTrening");

                    b.Navigation("Klijent");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Zaposlenik", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.ApplicationUser", "User")
                        .WithOne("Zaposlenik")
                        .HasForeignKey("InformacioniSistemTeretane.Models.Zaposlenik", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.GrupniTrening", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Trener", "Trener")
                        .WithMany("GrupniTreninzi")
                        .HasForeignKey("TrenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sala");

                    b.Navigation("Trener");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.PersonalniTrening", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Klijent", "Klijent")
                        .WithMany("PersonalniTreninzi")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Trener", "Trener")
                        .WithMany("PersonalniTreninzi")
                        .HasForeignKey("TrenerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Klijent");

                    b.Navigation("Trener");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.ProbniTrening", b =>
                {
                    b.HasOne("InformacioniSistemTeretane.Models.Klijent", "Klijent")
                        .WithMany("ProbniTreninzi")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InformacioniSistemTeretane.Models.Trener", "Trener")
                        .WithMany("ProbniTreninzi")
                        .HasForeignKey("TrenerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Klijent");

                    b.Navigation("Trener");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.ApplicationUser", b =>
                {
                    b.Navigation("Klijent")
                        .IsRequired();

                    b.Navigation("Zaposlenik")
                        .IsRequired();
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Disciplina", b =>
                {
                    b.Navigation("Takmicari");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Igraonica", b =>
                {
                    b.Navigation("Ponude");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Klijent", b =>
                {
                    b.Navigation("GrupnePrijave");

                    b.Navigation("GrupneRezervacije");

                    b.Navigation("Licence");

                    b.Navigation("PersonalniTreninzi");

                    b.Navigation("ProbniTreninzi");

                    b.Navigation("Takmicenja");

                    b.Navigation("Uplate");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.LicencniProgram", b =>
                {
                    b.Navigation("Licence");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Lokacija", b =>
                {
                    b.Navigation("Igraonice");

                    b.Navigation("Sale");

                    b.Navigation("Takmicenja");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Paket", b =>
                {
                    b.Navigation("Uplate");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Takmicenje", b =>
                {
                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Trener", b =>
                {
                    b.Navigation("GrupniTreninzi");

                    b.Navigation("PersonalniTreninzi");

                    b.Navigation("ProbniTreninzi");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.Zaposlenik", b =>
                {
                    b.Navigation("Sudije");

                    b.Navigation("TrenerskiPodaci");
                });

            modelBuilder.Entity("InformacioniSistemTeretane.Models.GrupniTrening", b =>
                {
                    b.Navigation("Prisustva");

                    b.Navigation("Rezervacije");
                });
#pragma warning restore 612, 618
        }
    }
}
